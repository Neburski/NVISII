name: Linux CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:	
      matrix:
        os:
          - ubuntu-18.04
        python-version: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
        optix-version: [70, 71, 72]

    container:
      quay.io/pypa/manylinux2014_x86_64:2021-01-12-c8250d8
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth : 0
      - name: What version of GCC do we have?
        run: |
          g++ --version
          
      # Download external dependencies
      - name: Download Dependencies
        run: |            
            # list contents of python folder
            #ls -R /opt/python/${{ matrix.python-version }}
            
            PY=${{ matrix.python-version }}
            PYVER=${PY:2:1}.${PY:3:1}
            PYTHONXDOTYMU=python${PY:2:1}.${PY:8:3}
            echo "This is python xdotymu: "
            echo $PYTHONXDOTYMU

            PYEXEC=/opt/python/${{ matrix.python-version }}/bin/python
            $PYEXEC -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())"         
            $PYEXEC -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))"
            
            ls /opt/python/
            
            # Get cmake
            /opt/python/cp38-cp38/bin/pip install cmake
            CMAKEEXEC=/opt/python/cp38-cp38/bin/cmake            
            $CMAKEEXEC --version
            
            # Setuptools scm
            /opt/python/${{ matrix.python-version }}/bin/pip install setuptools_scm
            
            # Install CUDA
            yum-config-manager --add-repo http://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo
            yum clean all
            yum -y erase devtoolset-9-binutils devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-gcc-gfortran 
            yum -y install devtoolset-8-binutils devtoolset-8-gcc devtoolset-8-gcc-c++
            yum -y install cuda-compiler-10-2 cuda-cudart-dev-10-2 cuda-minimal-build-10-2
            yum -y install libXi-devel   
            yum -y install xorg-x11-server-devel
            yum -y install libXinerama-devel
            yum -y install glfw-devel
            yum -y install wget
            yum -y install pcre-devel
            yum -y install unar  
            yum -y install zip      
            
            source /opt/rh/devtoolset-8/enable
    
            # Build a version of SWIG we can use
            mkdir build
            cd build

            # tmate for debugging
            # wget https://github.com/tmate-io/tmate/releases/download/2.4.0/tmate-2.4.0-static-linux-amd64.tar.xz
            # tar xf tmate-2.4.0-static-linux-amd64.tar.xz
            # cd tmate-2.4.0-static-linux-amd64
            # ./tmate -F
            
            wget http://prdownloads.sourceforge.net/swig/swig-4.0.2.tar.gz
            tar xzf swig-4.0.2.tar.gz
            cd swig-4.0.2
            ./configure --prefix $(pwd)
            make
            make install
            ls
            cd ../
            
      - name: Configure and install cmake project
        run: |
          # Set OptiX Version
          export OPTIX_VERSION=${{ matrix.optix-version }}
          CMAKEEXEC=/opt/python/cp38-cp38/bin/cmake            

          source /opt/rh/devtoolset-8/enable
          
          PY=${{ matrix.python-version }}
          PYVER=${PY:2:1}.${PY:3:1}
          PYTHONXDOTYMU=python${PY:2:1}.${PY:8:3}
          PYTHONXDOTY=python${PY:2:1}.${PY:3:1}
          echo $PYTHONXDOTYMU
          PYEXEC=/opt/python/${{ matrix.python-version }}/bin/python
          echo $PYTHONXDOTYMU

          $PYEXEC -m pip install --upgrade pip
          $PYEXEC -m pip install numpy==1.19.5
          $PYEXEC -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())"         
          $PYEXEC -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))"
         
          cd build
          
          # # tmate for debugging
          # wget https://github.com/tmate-io/tmate/releases/download/2.4.0/tmate-2.4.0-static-linux-amd64.tar.xz
          # tar xf tmate-2.4.0-static-linux-amd64.tar.xz
          # cd tmate-2.4.0-static-linux-amd64
          # ./tmate -F
          
          ls -l /usr/local/cuda-10.2
          ls -l /usr/local/cuda-10.2/bin
          ls -l /usr/local/cuda-10.2/targets/x86_64-linux/include
          ls -l /usr/local/cuda-10.2/targets/x86_64-linux/lib
          ls -l /usr/local/cuda-10.2/targets/x86_64-linux/lib/stubs
          ln -s /usr/local/cuda-10.2 /usr/local/cuda
          
          $CMAKEEXEC ../ \
          -DCUDA_CUDA_LIBRARY=/usr/local/cuda-10.2/targets/x86_64-linux/lib/stubs/libcuda.so \
          -DCUDA_NVCC_EXECUTABLE=/usr/local/cuda-10.2/bin/nvcc \
          -DCUDA_INCLUDE_DIRS=/usr/local/cuda-10.2/targets/x86_64-linux/include \
          -DCUDA_CUDART_LIBRARY=/usr/local/cuda-10.2/targets/x86_64-linux/lib/libcudart.so \
          -DSWIG_DIR="./swig-4.0.2/share/swig/4.0.2/" \
          -DSWIG_EXECUTABLE="swig-4.0.2/bin/swig" \
          -DPython_INCLUDE_DIRS=/opt/python/${{ matrix.python-version }}/include/$PYTHONXDOTYMU/ \
          -DPython_NumPy_INCLUDE_DIRS=/opt/python/${{ matrix.python-version }}/lib/$PYTHONXDOTY/site-packages/numpy/core/include/ \
          -DPython_VERSION_MAJOR=${PY:2:1} \
          -DPython_VERSION_MINOR=${PY:3:1} \
          -DCMAKE_BUILD_TYPE=Release \


          $CMAKEEXEC --build . --config Release --target install
          cd ..
          cd install
          
          # need to temporarily remove libcuda.so.1 from library
          cd nvisii
          patchelf --remove-needed libcuda.so.1 _nvisii.so
          cd ../
          
          # now make the bdistwheel
          $PYEXEC setup.py bdist_wheel
          cd dist
          
          # audit the bdistwheel for use on all linux distros
          # and use the same dir for both .py and .so files
          auditwheel repair -L "" *.whl  
          
          # add back on the libcuda.so.1 to the library
          cd wheelhouse
          unar -d *.whl
          cd nvisii*
          cd nvisii
          patchelf --add-needed libcuda.so.1 _nvisii.so
          cd ..
          cd ..
          rm *.whl
          NAME=$(ls -1 .)
          cd ${NAME}
          zip -r ../${NAME}.whl ./*
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nvisii-${{ matrix.os }}-python${{ matrix.python-version }}-optix${{ matrix.optix-version }}
          path: install/dist/wheelhouse/*.whl
          
  deploy:
    if: github.event_name == 'release' && github.event.action == 'created'
    
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2

    - name: Display structure of downloaded files
      run: ls -R
  
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Upload to test pypi
      env:
        TWINE_USERNAME: '__token__'
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        twine upload --repository-url https://test.pypi.org/legacy/ */*.whl
        
    - name: Upload to pypi
      if: success() && !github.event.release.prerelease
      env:
        TWINE_USERNAME: '__token__'
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload */*.whl
